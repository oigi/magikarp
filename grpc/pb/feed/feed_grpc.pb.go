// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	ListVideos(ctx context.Context, in *ListFeedReq, opts ...grpc.CallOption) (Feed_ListVideosClient, error)
	GetVideoById(ctx context.Context, in *QueryVideosReq, opts ...grpc.CallOption) (*Video, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) ListVideos(ctx context.Context, in *ListFeedReq, opts ...grpc.CallOption) (Feed_ListVideosClient, error) {
	stream, err := c.cc.NewStream(ctx, &Feed_ServiceDesc.Streams[0], "/feed.Feed/ListVideos", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedListVideosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feed_ListVideosClient interface {
	Recv() (*ListFeedResp, error)
	grpc.ClientStream
}

type feedListVideosClient struct {
	grpc.ClientStream
}

func (x *feedListVideosClient) Recv() (*ListFeedResp, error) {
	m := new(ListFeedResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *feedClient) GetVideoById(ctx context.Context, in *QueryVideosReq, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, "/feed.Feed/GetVideoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	ListVideos(*ListFeedReq, Feed_ListVideosServer) error
	GetVideoById(context.Context, *QueryVideosReq) (*Video, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) ListVideos(*ListFeedReq, Feed_ListVideosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedFeedServer) GetVideoById(context.Context, *QueryVideosReq) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoById not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_ListVideos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFeedReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServer).ListVideos(m, &feedListVideosServer{stream})
}

type Feed_ListVideosServer interface {
	Send(*ListFeedResp) error
	grpc.ServerStream
}

type feedListVideosServer struct {
	grpc.ServerStream
}

func (x *feedListVideosServer) Send(m *ListFeedResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Feed_GetVideoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVideosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetVideoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/GetVideoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetVideoById(ctx, req.(*QueryVideosReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoById",
			Handler:    _Feed_GetVideoById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVideos",
			Handler:       _Feed_ListVideos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "feed.proto",
}
