// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: feed.proto

package feed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	CreateVideo(ctx context.Context, in *CreateVideoReq, opts ...grpc.CallOption) (*CreateVideoResp, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*DeleteVideoResp, error)
	GetVideo(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error)
	SearchVideo(ctx context.Context, in *SearchVideoReq, opts ...grpc.CallOption) (*SearchVideoResp, error)
	ShareVideo(ctx context.Context, in *ShareVideoReq, opts ...grpc.CallOption) (*ShareVideoResp, error)
	InitFollowFeed(ctx context.Context, in *InitFollowFeedReq, opts ...grpc.CallOption) (*InitFollowFeedResp, error)
	PushRankVideo(ctx context.Context, in *PushRankVideoReq, opts ...grpc.CallOption) (*PushRankVideoResp, error)
	PushHotVideo(ctx context.Context, in *PushHotVideoReq, opts ...grpc.CallOption) (*PushHotVideoResp, error)
	PushSimilarVideo(ctx context.Context, in *PushSimilarVideoReq, opts ...grpc.CallOption) (*PushSimilarVideoResp, error)
	PushFollowVideo(ctx context.Context, in *PushFollowVideoReq, opts ...grpc.CallOption) (*PushFollowVideoResp, error)
	ListHistoryVideo(ctx context.Context, in *ListHistoryVideoReq, opts ...grpc.CallOption) (*ListHistoryVideoResp, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) CreateVideo(ctx context.Context, in *CreateVideoReq, opts ...grpc.CallOption) (*CreateVideoResp, error) {
	out := new(CreateVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/CreateVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*DeleteVideoResp, error) {
	out := new(DeleteVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/DeleteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) GetVideo(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error) {
	out := new(GetVideoListResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/GetVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) SearchVideo(ctx context.Context, in *SearchVideoReq, opts ...grpc.CallOption) (*SearchVideoResp, error) {
	out := new(SearchVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/SearchVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ShareVideo(ctx context.Context, in *ShareVideoReq, opts ...grpc.CallOption) (*ShareVideoResp, error) {
	out := new(ShareVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/ShareVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) InitFollowFeed(ctx context.Context, in *InitFollowFeedReq, opts ...grpc.CallOption) (*InitFollowFeedResp, error) {
	out := new(InitFollowFeedResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/InitFollowFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) PushRankVideo(ctx context.Context, in *PushRankVideoReq, opts ...grpc.CallOption) (*PushRankVideoResp, error) {
	out := new(PushRankVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/PushRankVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) PushHotVideo(ctx context.Context, in *PushHotVideoReq, opts ...grpc.CallOption) (*PushHotVideoResp, error) {
	out := new(PushHotVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/PushHotVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) PushSimilarVideo(ctx context.Context, in *PushSimilarVideoReq, opts ...grpc.CallOption) (*PushSimilarVideoResp, error) {
	out := new(PushSimilarVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/PushSimilarVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) PushFollowVideo(ctx context.Context, in *PushFollowVideoReq, opts ...grpc.CallOption) (*PushFollowVideoResp, error) {
	out := new(PushFollowVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/PushFollowVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) ListHistoryVideo(ctx context.Context, in *ListHistoryVideoReq, opts ...grpc.CallOption) (*ListHistoryVideoResp, error) {
	out := new(ListHistoryVideoResp)
	err := c.cc.Invoke(ctx, "/feed.Feed/ListHistoryVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	CreateVideo(context.Context, *CreateVideoReq) (*CreateVideoResp, error)
	DeleteVideo(context.Context, *DeleteVideoReq) (*DeleteVideoResp, error)
	GetVideo(context.Context, *GetVideoListReq) (*GetVideoListResp, error)
	SearchVideo(context.Context, *SearchVideoReq) (*SearchVideoResp, error)
	ShareVideo(context.Context, *ShareVideoReq) (*ShareVideoResp, error)
	InitFollowFeed(context.Context, *InitFollowFeedReq) (*InitFollowFeedResp, error)
	PushRankVideo(context.Context, *PushRankVideoReq) (*PushRankVideoResp, error)
	PushHotVideo(context.Context, *PushHotVideoReq) (*PushHotVideoResp, error)
	PushSimilarVideo(context.Context, *PushSimilarVideoReq) (*PushSimilarVideoResp, error)
	PushFollowVideo(context.Context, *PushFollowVideoReq) (*PushFollowVideoResp, error)
	ListHistoryVideo(context.Context, *ListHistoryVideoReq) (*ListHistoryVideoResp, error)
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) CreateVideo(context.Context, *CreateVideoReq) (*CreateVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedFeedServer) DeleteVideo(context.Context, *DeleteVideoReq) (*DeleteVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedFeedServer) GetVideo(context.Context, *GetVideoListReq) (*GetVideoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedFeedServer) SearchVideo(context.Context, *SearchVideoReq) (*SearchVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideo not implemented")
}
func (UnimplementedFeedServer) ShareVideo(context.Context, *ShareVideoReq) (*ShareVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareVideo not implemented")
}
func (UnimplementedFeedServer) InitFollowFeed(context.Context, *InitFollowFeedReq) (*InitFollowFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFollowFeed not implemented")
}
func (UnimplementedFeedServer) PushRankVideo(context.Context, *PushRankVideoReq) (*PushRankVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRankVideo not implemented")
}
func (UnimplementedFeedServer) PushHotVideo(context.Context, *PushHotVideoReq) (*PushHotVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushHotVideo not implemented")
}
func (UnimplementedFeedServer) PushSimilarVideo(context.Context, *PushSimilarVideoReq) (*PushSimilarVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSimilarVideo not implemented")
}
func (UnimplementedFeedServer) PushFollowVideo(context.Context, *PushFollowVideoReq) (*PushFollowVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFollowVideo not implemented")
}
func (UnimplementedFeedServer) ListHistoryVideo(context.Context, *ListHistoryVideoReq) (*ListHistoryVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistoryVideo not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/CreateVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).CreateVideo(ctx, req.(*CreateVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/DeleteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).DeleteVideo(ctx, req.(*DeleteVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/GetVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).GetVideo(ctx, req.(*GetVideoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_SearchVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).SearchVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/SearchVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).SearchVideo(ctx, req.(*SearchVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ShareVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ShareVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/ShareVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ShareVideo(ctx, req.(*ShareVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_InitFollowFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitFollowFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).InitFollowFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/InitFollowFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).InitFollowFeed(ctx, req.(*InitFollowFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_PushRankVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRankVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).PushRankVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/PushRankVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).PushRankVideo(ctx, req.(*PushRankVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_PushHotVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushHotVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).PushHotVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/PushHotVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).PushHotVideo(ctx, req.(*PushHotVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_PushSimilarVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSimilarVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).PushSimilarVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/PushSimilarVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).PushSimilarVideo(ctx, req.(*PushSimilarVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_PushFollowVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFollowVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).PushFollowVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/PushFollowVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).PushFollowVideo(ctx, req.(*PushFollowVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_ListHistoryVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistoryVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).ListHistoryVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.Feed/ListHistoryVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).ListHistoryVideo(ctx, req.(*ListHistoryVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideo",
			Handler:    _Feed_CreateVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _Feed_DeleteVideo_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _Feed_GetVideo_Handler,
		},
		{
			MethodName: "SearchVideo",
			Handler:    _Feed_SearchVideo_Handler,
		},
		{
			MethodName: "ShareVideo",
			Handler:    _Feed_ShareVideo_Handler,
		},
		{
			MethodName: "InitFollowFeed",
			Handler:    _Feed_InitFollowFeed_Handler,
		},
		{
			MethodName: "PushRankVideo",
			Handler:    _Feed_PushRankVideo_Handler,
		},
		{
			MethodName: "PushHotVideo",
			Handler:    _Feed_PushHotVideo_Handler,
		},
		{
			MethodName: "PushSimilarVideo",
			Handler:    _Feed_PushSimilarVideo_Handler,
		},
		{
			MethodName: "PushFollowVideo",
			Handler:    _Feed_PushFollowVideo_Handler,
		},
		{
			MethodName: "ListHistoryVideo",
			Handler:    _Feed_ListHistoryVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
